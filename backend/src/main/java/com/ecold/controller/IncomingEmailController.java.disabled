package com.ecold.controller;

import com.ecold.dto.IncomingEmailDto;
import com.ecold.entity.IncomingEmail;
import com.ecold.service.IncomingEmailService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/incoming-emails")
@RequiredArgsConstructor
@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:3000"})
public class IncomingEmailController {
    
    private final IncomingEmailService incomingEmailService;
    
    @GetMapping
    public ResponseEntity<Page<IncomingEmailDto>> getIncomingEmails(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String category) {
        
        Page<IncomingEmailDto> emails;
        if (category != null) {
            IncomingEmail.EmailCategory emailCategory = IncomingEmail.EmailCategory.valueOf(category.toUpperCase());
            emails = incomingEmailService.getIncomingEmailsByCategory(emailCategory, page, size);
        } else {
            emails = incomingEmailService.getIncomingEmails(page, size);
        }
        
        return ResponseEntity.ok(emails);
    }
    
    @GetMapping("/unread")
    public ResponseEntity<List<IncomingEmailDto>> getUnreadEmails() {
        List<IncomingEmailDto> unreadEmails = incomingEmailService.getUnreadEmails();
        return ResponseEntity.ok(unreadEmails);
    }
    
    @PostMapping("/{id}/mark-read")
    public ResponseEntity<Void> markAsRead(@PathVariable Long id) {
        incomingEmailService.markAsRead(id);
        return ResponseEntity.ok().build();
    }
    
    @GetMapping("/unread-counts")
    public ResponseEntity<Map<String, Long>> getUnreadCounts() {
        Map<String, Long> counts = Map.of(
            "APPLICATION_UPDATE", incomingEmailService.getUnreadCount(IncomingEmail.EmailCategory.APPLICATION_UPDATE),
            "SHORTLIST_INTERVIEW", incomingEmailService.getUnreadCount(IncomingEmail.EmailCategory.SHORTLIST_INTERVIEW),
            "REJECTION_CLOSED", incomingEmailService.getUnreadCount(IncomingEmail.EmailCategory.REJECTION_CLOSED),
            "RECRUITER_OUTREACH", incomingEmailService.getUnreadCount(IncomingEmail.EmailCategory.RECRUITER_OUTREACH),
            "GENERAL_INQUIRY", incomingEmailService.getUnreadCount(IncomingEmail.EmailCategory.GENERAL_INQUIRY),
            "TOTAL", incomingEmailService.getTotalUnreadCount()
        );
        return ResponseEntity.ok(counts);
    }
    
    @PostMapping("/scan")
    public ResponseEntity<Void> scanIncomingEmails() {
        incomingEmailService.scanIncomingEmails();
        return ResponseEntity.ok().build();
    }
    
    @GetMapping("/categories")
    public ResponseEntity<IncomingEmail.EmailCategory[]> getCategories() {
        return ResponseEntity.ok(IncomingEmail.EmailCategory.values());
    }
    
    @PostMapping("/{id}/recategorize")
    public ResponseEntity<IncomingEmailDto> recategorizeEmail(
            @PathVariable Long id,
            @RequestParam String category) {
        IncomingEmail.EmailCategory emailCategory = IncomingEmail.EmailCategory.valueOf(category.toUpperCase());
        IncomingEmailDto email = incomingEmailService.recategorizeEmail(id, emailCategory);
        return ResponseEntity.ok(email);
    }
    
    @GetMapping("/timeline")
    public ResponseEntity<List<IncomingEmailDto>> getEmailTimeline(
            @RequestParam(defaultValue = "30") int days) {
        List<IncomingEmailDto> timeline = incomingEmailService.getEmailTimeline(days);
        return ResponseEntity.ok(timeline);
    }
    
    @GetMapping("/highlights")
    public ResponseEntity<List<IncomingEmailDto>> getInboxHighlights() {
        // Get recent important emails (shortlist/interview and outreach)
        List<IncomingEmailDto> highlights = incomingEmailService.getEmailTimeline(7);
        return ResponseEntity.ok(highlights);
    }
}