spring:
  application:
    name: ecold-backend
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/ecold}
    username: ${DATABASE_USERNAME:ecold_user}
    password: ${DATABASE_PASSWORD:ecold_pass123}
    driver-class-name: ${DATABASE_DRIVER:org.postgresql.Driver}
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        dialect: ${DATABASE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope:
              - openid
              - profile
              - email
              - https://www.googleapis.com/auth/gmail.readonly
              - https://www.googleapis.com/auth/gmail.send
            redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:4200/auth/google/callback}
          microsoft:
            client-id: ${MICROSOFT_CLIENT_ID:}
            client-secret: ${MICROSOFT_CLIENT_SECRET:}
            scope:
              - openid
              - profile
              - email
              - https://graph.microsoft.com/mail.read
              - https://graph.microsoft.com/mail.send
            redirect-uri: ${MICROSOFT_REDIRECT_URI:http://localhost:4200/auth/microsoft/callback}
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: email
          microsoft:
            authorization-uri: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
            token-uri: https://login.microsoftonline.com/common/oauth2/v2.0/token
            user-info-uri: https://graph.microsoft.com/v1.0/me
            user-name-attribute: id

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized

logging:
  level:
    root: WARN
    com.ecold: ${LOG_LEVEL:INFO}
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate: WARN
    org.hibernate.SQL: ERROR
    org.hibernate.type: ERROR
    org.hibernate.type.descriptor.sql: ERROR
    org.hibernate.orm.jdbc.bind: ERROR
    com.zaxxer.hikari: WARN

app:
  jwt:
    secret: ${JWT_SECRET:ecold-super-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:86400000}
  email:
    enabled: ${EMAIL_ENABLED:true}
    from-name: ${EMAIL_FROM_NAME:ECold Application}
    batch-size: ${EMAIL_BATCH_SIZE:50}
    rate-limit: ${EMAIL_RATE_LIMIT:100}
    retry-attempts: ${EMAIL_RETRY_ATTEMPTS:3}
  file:
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:4200,http://localhost:3000}

gmail:
  api:
    enabled: ${GMAIL_API_ENABLED:true}
    client-id: ${GOOGLE_CLIENT_ID:}
    client-secret: ${GOOGLE_CLIENT_SECRET:}
    redirect-uri: ${GMAIL_REDIRECT_URI:http://localhost:8080/api/auth/google/callback}
    scopes: ${GMAIL_SCOPES:https://www.googleapis.com/auth/gmail.send,https://www.googleapis.com/auth/gmail.modify}

templates:
  follow-up:
    auto-assign: ${TEMPLATES_FOLLOWUP_AUTO_ASSIGN:true}
    delay-days: ${TEMPLATES_FOLLOWUP_DELAY_DAYS:7}

scheduling:
  email:
    enabled: ${SCHEDULING_EMAIL_ENABLED:true}
    thread-pool-size: ${SCHEDULING_THREAD_POOL_SIZE:5}


